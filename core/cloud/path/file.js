const fs = require('fs')
const {
  constants
} = require('fs')


const Dir = require('./dir')

// ‚ú® üìå
class Files extends Dir {
  constructor(options) {
    super(options)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
   * @param {string} file –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞–º–∏
   * @returns {object} {ext, name}
   */
  name(file) {
    const {
      ext,
      name
    } = this.path.parse(file)
    return {
      ext,
      name
    }
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
   * @param {string} file –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
   * @returns {string}
   */
  extFile(file) {
    return this.path.extname(file)
  }


  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ –æ–Ω –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
   * @param {string} path –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞–º–∏
   * @returns {Promise} Promise object true - –æ–±—ä–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω false - –æ–±—ä–µ–∫—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
   */
  isExists(path) {
    // await fsPromises.access(saveTo, constants.F_OK | constants.R_).then((access) => true).catch((err) => false)
    return new Promise((resolve, reject) => {
      fs.access(path, constants.F_OK | constants.R_OK, err => {
        if (!err) return resolve(true);
        if (err.code === 'ENOENT') return resolve(false);
        reject(err);
      });
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª–æ–º
   * @param {string} path –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
   * @returns {boolean}
   */
  isFile(path) {
    path = this.resolve(path);
    return this.fs.stat(path).then(stat => stat.isFile())
  }

  /**
   * –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
   * @param {string} path –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
   * @returns {string}
   */
  size(path) {
    path = this.resolve(path);
    return this.fs.stat(path).then(stat => this.formatBytes(stat.size))
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
   * @param {string} file –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
   * @returns {Promise}
   */
  async delete(file) {
    const isFileExt = await this.isExists(file)
    return new Promise((resolve, reject) => {
      if (isFileExt) {
        fs.unlink(file, (err) => {
          if (err) {
            reject({
              ok: false,
              error: err
            })
          } else {
            resolve(true)
          }
        })
      } else {
        reject(false)
      }

    })
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ñ–∞–π–ª–æ–≤.
   * @param {array} arr –ú–∞—Å—Å–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏. –ö–∞–∂–¥—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
   * @returns {boolean|Promise} true - –í—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ 
   */
  deleteArrayFiles(arr) {
    let arrPromise = []
    let length = arr.length
    for (let i = 0; i < length; i++) {
      let file = this.absolute(arr[i])
      arrPromise.push(this.delete(file))
    }
    return Promise.all(arrPromise).then(del => del.every(bool => bool === true)).catch(error => error)
  }




}

module.exports = Files